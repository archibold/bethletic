// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  exercise User_exercise[]
}

model Account {
  id                 String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Exercise {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  body_part         String?
  equipment         String?
  gif_url           String?
  api_id            String?
  name              String?
  target            String?
  secondary_muscles String[]
  instructions      String[]
  user User_exercise[]
}

model exec_copy {
  body_part         String?
  equipment         String?
  gif_url           String?
  api_id            String?
  name              String?
  target            String?
  secondary_muscles String[]
  instructions      String[]
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

model User_exercise {
  user       User     @relation(fields: [user_id], references: [id])
  user_id     String @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  exercise   Exercise @relation(fields: [exercise_id], references: [id])
  exercise_id String @db.Uuid// relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([user_id, exercise_id])
}