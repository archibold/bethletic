generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customers {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String @db.VarChar(255)
  email     String @db.VarChar(255)
  image_url String @db.VarChar(255)
}

model exercise {
  body_part         String?
  equipment         String?
  gif_url           String?
  api_id            String?
  name              String?
  target            String?
  secondary_muscles String[]
  instructions      String[]
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

model exec_copy {
  body_part         String?
  equipment         String?
  gif_url           String?
  api_id            String?
  name              String?
  target            String?
  secondary_muscles String[]
  instructions      String[]
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

model invoices {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id String   @db.Uuid
  amount      Int
  status      String   @db.VarChar(255)
  date        DateTime @db.Date
}

model revenue {
  month   String @unique @db.VarChar(4)
  revenue Int
}

model user_exercise {
  assignedAt  DateTime @default(now())
  assignedBy  String
  user_id     String   @db.Uuid
  exercise_id String   @db.Uuid

  @@id([user_id, exercise_id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PasswordResetToken {
  email   String
  token   String   @unique
  expires DateTime
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  @@unique([email, token])
}

model TwoFactorConfirmation {
  userId String @unique
  id     String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFactorToken {
  email   String
  token   String   @unique
  expires DateTime
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  @@unique([email, token])
}

model User {
  id                    String                 @id
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  Account               Account[]
  TwoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id
  email   String
  oldEmail   String?
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  ADMIN
  USER
}
